<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Timecard | Late, Undertime, OT (with Dinner Deduction)</title>
  <style>
    :root{
      --bg:#0f172a;
      --card:#111827;
      --muted:#94a3b8;
      --text:#e5e7eb;
      --accent:#22c55e;
      --accent-2:#60a5fa;
      --warn:#f59e0b;
      --danger:#ef4444;
      --soft:#1f2937;
    }
    *{box-sizing:border-box}
    body{margin:0;background:linear-gradient(180deg,var(--bg),#0b1224);color:var(--text);font:14px/1.4 system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif}
    header{position:sticky;top:0;z-index:10;background:rgba(17,24,39,.85);backdrop-filter:blur(6px);border-bottom:1px solid #1f2937}
    .wrap{max-width:1100px;margin:0 auto;padding:12px 20px}
    h1{font-size:20px;margin:0}
    .grid{display:grid;gap:14px}
    .cols-2{grid-template-columns:1fr 1fr}
    .cols-3{grid-template-columns:repeat(3,1fr)}
    .card{background:var(--card);border:1px solid #1f2937;border-radius:16px;padding:14px;box-shadow:0 8px 24px rgba(0,0,0,.25)}
    label{display:block;font-weight:600;color:var(--muted);margin-bottom:6px}
    input,select,button{width:100%;padding:10px 12px;border-radius:12px;border:1px solid #374151;background:#0b1020;color:var(--text)}
    input::placeholder{color:#6b7280}
    button{cursor:pointer;font-weight:700;letter-spacing:.2px}
    .btn{background:linear-gradient(180deg,#1f7a4a,#17633b);border:1px solid #115e35}
    .btn:hover{filter:brightness(1.05)}
    .btn-ghost{background:#0b1020;border:1px dashed #374151}
    .btn-warn{background:linear-gradient(180deg,#b45309,#92400e);border:1px solid #78350f}
    .btn-danger{background:linear-gradient(180deg,#b91c1c,#7f1d1d);border:1px solid #7f1d1d}
    table{width:100%;border-collapse:collapse}
    th,td{padding:10px;border-bottom:1px solid #1f2937;text-align:left;vertical-align:top}
    th{color:#a5b4fc;font-weight:700}
    .right{text-align:right}
    .muted{color:var(--muted)}
    .row{display:flex;gap:10px;align-items:center}
    .row > *{flex:1}
    .pill{display:inline-block;padding:2px 8px;border-radius:999px;font-size:12px;background:#0b1020;border:1px solid #374151;color:#a7f3d0}
    .footer{color:#94a3b8;font-size:12px;padding:16px}
    .sticky-cta{position:sticky;bottom:0;padding:10px;background:rgba(17,24,39,.8);backdrop-filter:blur(6px);border-top:1px solid #1f2937;border-bottom-left-radius:16px;border-bottom-right-radius:16px}
    .small{font-size:12px}
    .nowrap{white-space:nowrap}
    /* compact payroll summary table tweaks */
    #paySummaryTable th, #paySummaryTable td { text-align: right; }
    #paySummaryTable th:first-child, #paySummaryTable td:first-child { text-align: left; }
  </style>
</head>
<body>
  <header>
    <div class="wrap row">
      <h1>Timecard — Late, Undertime, OT (Dinner Deduction)</h1>
      <div class="pill">Schedule: 8:40 AM – 5:30 PM (PST)</div>
    </div>
  </header>

  <main class="wrap grid" style="margin-top:18px">
    <!-- Employees -->
    <section class="card">
      <h2 style="margin:0 0 12px 0">Employees</h2>
      <div class="grid cols-3">
        <div>
          <label>Employee Name</label>
          <input id="empName" placeholder="e.g., Alice"/>
        </div>
        <div>
          <label>Hourly Rate</label>
          <input id="empRate" type="number" step="0.01" placeholder="e.g., 18.00"/>
        </div>
        <div>
          <label>OT Multiplier</label>
          <input id="empOtMult" type="number" step="0.01" placeholder="e.g., 1.50"/>
        </div>
      </div>
      <div class="row" style="margin-top:10px">
        <button class="btn" onclick="addEmployee()">Add / Update Employee</button>
        <button class="btn-ghost" onclick="resetEmployees()">Reset to Demo</button>
      </div>
      <div class="small muted" style="margin-top:8px">Employees are saved in your browser (localStorage). DO NOT clear your browsing history to avoid deleting your data.</div>
      <table style="margin-top:12px">
        <thead>
          <tr><th>Employee</th><th class="right">Hourly Rate</th><th class="right">OT Mult.</th><th class="right">Actions</th></tr>
        </thead>
        <tbody id="empTable"></tbody>
      </table>
    </section>

    <!-- Time Log -->
    <section class="card">
      <h2 style="margin:0 0 12px 0">Time Log</h2>
      <div class="grid cols-3">
        <div>
          <label>Date</label>
          <input id="logDate" type="date" />
        </div>
        <div>
          <label>Employee</label>
          <select id="logEmp"></select>
        </div>
        <div></div>
        <div>
          <label>Time In</label>
          <input id="logIn" type="time" step="60" placeholder="08:40"/>
        </div>
        <div>
          <label>Time Out</label>
          <input id="logOut" type="time" step="60" placeholder="17:30"/>
        </div>
        <div class="row" style="align-items:flex-end">
          <button class="btn" onclick="addLog()">Add Log</button>
          <button class="btn-ghost" onclick="clearLogs()">Clear All Logs</button>
        </div>
      </div>

      <table style="margin-top:12px">
        <thead>
          <tr>
            <th>Date</th><th>Employee</th><th>In</th><th>Out</th>
            <th class="right">Late (min)</th>
            <th class="right">Undertime (min)</th>
            <th class="right">Reg (min)</th>
            <th class="right">OT1 17:31–20:30 (min)</th>
            <th class="right">Dinner Deduct (min)</th>
            <th class="right">OT2 20:31–24:00 (min)</th>
            <th class="right">Post-Midnight ≥00:00 (min)</th>
            <th class="right">Regular Pay</th>
            <th class="right">OT Pay</th>
            <th class="right">Late Deduction</th>
            <th class="right">Post-Midnight Pay</th>
            <th class="right">Net Pay</th>
            <th class="right">Actions</th>
          </tr>
        </thead>
        <tbody id="logTable"></tbody>
      </table>

      <div class="sticky-cta row">
        <button class="btn" onclick="exportCSV()">Export Logs (CSV)</button>
        <button class="btn-warn" onclick="recalc()">Recalculate</button>
      </div>
    </section>

    <!-- Payroll Summary (compact, all employees) -->
    <section class="card">
      <h2 style="margin:0 0 12px 0">Payroll Summary (All Employees)</h2>
      <div class="grid cols-3">
        <div>
          <label>From Date</label>
          <input id="sumFrom" type="date"/>
        </div>
        <div>
          <label>To Date</label>
          <input id="sumTo" type="date"/>
        </div>
        <div style="align-self:end">
          <div class="row" style="gap:8px">
            <button class="btn" onclick="computeSummaryAll()">Generate Summary</button>
            <button class="btn-ghost" onclick="clearSummary()">Clear</button>
            <button class="btn" onclick="exportPayrollCSV()">Download CSV</button>
          </div>
        </div>
      </div>

      <table id="paySummaryTable" style="margin-top:12px">
        <thead>
          <tr>
            <th>Employee</th>
            <th>Total Regular Pay</th>
            <th>Total OT Pay</th>
            <th>Total Post-Midnight Pay</th>
            <th>Total Late Deduction</th>
            <th>Net Pay (Period)</th>
          </tr>
        </thead>
        <tbody id="sumTable"></tbody>
      </table>
      <div class="footer">Select date range and click <strong>Generate Summary</strong>. Then click <strong>Download CSV</strong> to export the payroll summary.</div>
    </section>
  </main>

  <script>
    /***** Persistence *****/
    const LS_KEYS = { employees:'tc_employees', logs:'tc_logs' };
    const getEmployees = () => JSON.parse(localStorage.getItem(LS_KEYS.employees) || '[]');
    const setEmployees = (arr) => localStorage.setItem(LS_KEYS.employees, JSON.stringify(arr));
    const getLogs = () => JSON.parse(localStorage.getItem(LS_KEYS.logs) || '[]');
    const setLogs = (arr) => localStorage.setItem(LS_KEYS.logs, JSON.stringify(arr));

    /***** Constants *****/
    const SCHED_START = {h:8, m:40};
    const SCHED_END   = {h:17, m:30};
    const OT1_START = {h:17, m:31};
    const OT1_END   = {h:20, m:30};
    const OT2_START = {h:20, m:31};
    const DINNER_DEDUCT_MIN = 60; // once per log if any OT1

    /***** Utilities *****/
    const two = n => String(n).padStart(2,'0');
    function makeDT(dateStr, h, m){
      const d = new Date(dateStr + 'T00:00:00');
      d.setHours(h, m, 0, 0);
      return d;
    }
    function makeDTFromDateObj(dateObj, h, m){
      const d = new Date(dateObj);
      d.setHours(h, m, 0, 0);
      return d;
    }
    function parseTimeToHM(t){ if(!t) return null; const [h,m] = t.split(':').map(Number); return {h, m}; }
    function minutesBetween(a,b){ return Math.max(0, Math.round((b-a)/60000)); }
    function overlapMinutes(a1,a2,b1,b2){ const start = new Date(Math.max(a1,b1)); const end = new Date(Math.min(a2,b2)); return Math.max(0, Math.round((end-start)/60000)); }
    function fmtMoney(n){ return (n||0).toLocaleString(undefined,{minimumFractionDigits:2, maximumFractionDigits:2}); }
    function fmtMoneyNoCommas(n){ return (n||0).toFixed(2); } // for CSV (no thousands separators)

    /***** Core Calculation per log (with previous-day post-midnight detection) *****/
    function calculateForLog(log, emp){
      const inHM = parseTimeToHM(log.timeIn);
      const outHM = parseTimeToHM(log.timeOut);
      if(!log.date || !inHM || !outHM) return null;

      const inDT = makeDT(log.date, inHM.h, inHM.m);
      let outDT = makeDT(log.date, outHM.h, outHM.m);
      if(outDT <= inDT) outDT.setDate(outDT.getDate()+1); // crossed midnight

      // === ADDED: detect early-morning entries that are actually previous-day post-midnight OT ===
      // Rule: if TimeIn hour is 0-5 (00:00 - 05:59) treat the entry as belonging to previous date's shift
      const PREV_DAY_POSTMID_H_LIMIT = 6; // hours < 6 -> previous-day OT
      const logBaseDateObj = new Date(log.date + 'T00:00:00');
      let effectiveBaseDateObj = new Date(logBaseDateObj); // default
      if (inHM.h >= 0 && inHM.h < PREV_DAY_POSTMID_H_LIMIT) {
        // Treat as post-midnight OT that belongs to previous calendar day
        effectiveBaseDateObj.setDate(effectiveBaseDateObj.getDate() - 1);
      }
      // Scheduled times use effectiveBaseDateObj
      const schedStart = makeDTFromDateObj(effectiveBaseDateObj, SCHED_START.h, SCHED_START.m);
      const schedEnd   = makeDTFromDateObj(effectiveBaseDateObj, SCHED_END.h, SCHED_END.m);

      // OT windows built from effectiveBaseDateObj
      const ot1Start = makeDTFromDateObj(effectiveBaseDateObj, OT1_START.h, OT1_START.m);
      const ot1End   = makeDTFromDateObj(effectiveBaseDateObj, OT1_END.h, OT1_END.m);
      const ot2Start = makeDTFromDateObj(effectiveBaseDateObj, OT2_START.h, OT2_START.m);
      const midnightNext = new Date(effectiveBaseDateObj);
      midnightNext.setDate(effectiveBaseDateObj.getDate() + 1);
      midnightNext.setHours(0,0,0,0);

      // Late minutes: only if actual IN occurred on same calendar date as the scheduled start
      let lateMin = 0;
      if(inDT.toDateString() === schedStart.toDateString()){
        lateMin = Math.max(0, minutesBetween(schedStart, inDT));
      } else {
        lateMin = 0; // not late if it's post-midnight OT for previous day
      }

      // Undertime minutes: only if actual OUT occurred on same calendar date as the scheduled end
      let underMin = 0;
      if(outDT.toDateString() === schedEnd.toDateString()){
        underMin = Math.max(0, minutesBetween(outDT, schedEnd));
      } else {
        underMin = 0;
      }

      // Regular minutes: overlap of [inDT, outDT] with scheduled window
      const regMin = overlapMinutes(inDT, outDT, schedStart, schedEnd);

      // OT1 and dinner deduction
      const ot1Min = overlapMinutes(inDT, outDT, ot1Start, ot1End);
      const dinnerDed = ot1Min > 0 ? Math.min(DINNER_DEDUCT_MIN, ot1Min) : 0;

      // OT2: 20:31–24:00 (same effective day)
      const ot2Min = overlapMinutes(inDT, outDT, ot2Start, midnightNext);

      // Post-Midnight minutes (>= 00:00 next day relative to effectiveBaseDateObj)
      const postMidStart = midnightNext;
      const postMidMin = overlapMinutes(inDT, outDT, postMidStart, outDT);

      // Pay calculations
      const rate = Number(emp.rate||0);
      const otMult = Number(emp.otMult||1);
      const regPay = regMin * (rate/60);
      const otPay  = ((Math.max(0, ot1Min - dinnerDed)) + ot2Min) * (rate*otMult/60);
      const lateDed = lateMin * (rate/60);
      const postMidPay = postMidMin * (rate/60); // normal rate
      const net = regPay + otPay + postMidPay - lateDed;

      return { inDT, outDT, schedStart, schedEnd, lateMin, underMin, regMin, ot1Min, dinnerDed, ot2Min, postMidMin, regPay, otPay, lateDed, postMidPay, net };
    }

    /***** UI Helpers *****/
    function renderEmployees(){
      const tbody = document.getElementById('empTable');
      const sel1 = document.getElementById('logEmp');
      tbody.innerHTML = '';
      sel1.innerHTML = '<option value="">— Select —</option>';
      getEmployees().forEach(e=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${e.name}</td>
                        <td class="right">${fmtMoney(e.rate)}</td>
                        <td class="right">${Number(e.otMult).toFixed(2)}</td>
                        <td class="right"><button class="btn-ghost" onclick="delEmployee('${e.name}')">Delete</button></td>`;
        tbody.appendChild(tr);
        sel1.insertAdjacentHTML('beforeend', `<option>${e.name}</option>`);
      });
    }

    function renderLogs(){
      const tbody = document.getElementById('logTable');
      tbody.innerHTML = '';
      const logs = getLogs();
      const employees = getEmployees();

      logs.forEach((log, idx)=>{
        const emp = employees.find(x=>x.name===log.employee) || {rate:0, otMult:1};
        const calc = calculateForLog(log, emp);
        const delBtn = `<button class='btn-ghost' onclick='delLog(${idx})'>Delete</button>`;
        if(!calc){
          const tr = document.createElement('tr');
          tr.innerHTML = `<td>${log.date||''}</td><td>${log.employee||''}</td><td>${log.timeIn||''}</td><td>${log.timeOut||''}</td>
                          <td colspan='12' class='muted'>Incomplete row</td><td class='right'>${delBtn}</td>`;
          tbody.appendChild(tr);
          return;
        }
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${log.date}</td>
          <td>${log.employee}</td>
          <td class='nowrap'>${log.timeIn}</td>
          <td class='nowrap'>${log.timeOut}</td>
          <td class='right'>${calc.lateMin}</td>
          <td class='right'>${calc.underMin}</td>
          <td class='right'>${calc.regMin}</td>
          <td class='right'>${calc.ot1Min}</td>
          <td class='right'>${calc.dinnerDed}</td>
          <td class='right'>${calc.ot2Min}</td>
          <td class='right'>${calc.postMidMin}</td>
          <td class='right'>${fmtMoney(calc.regPay)}</td>
          <td class='right'>${fmtMoney(calc.otPay)}</td>
          <td class='right'>${fmtMoney(calc.lateDed)}</td>
          <td class='right'>${fmtMoney(calc.postMidPay)}</td>
          <td class='right'><strong>${fmtMoney(calc.net)}</strong></td>
          <td class='right'>${delBtn}</td>
        `;
        tbody.appendChild(tr);
      });
    }

    function recalc(){ renderLogs(); }

    function addEmployee(){
      const name = document.getElementById('empName').value.trim();
      const rate = Number(document.getElementById('empRate').value||0);
      const otMult = Number(document.getElementById('empOtMult').value||1);
      if(!name){ alert('Enter employee name'); return; }
      const arr = getEmployees();
      const i = arr.findIndex(e=>e.name===name);
      const record = {name, rate, otMult};
      if(i>=0) arr[i]=record; else arr.push(record);
      setEmployees(arr); renderEmployees();
      document.getElementById('empName').value='';
      document.getElementById('empRate').value='';
      document.getElementById('empOtMult').value='';
    }
    function delEmployee(name){
      if(!confirm('Delete employee '+name+'?')) return;
      setEmployees(getEmployees().filter(e=>e.name!==name));
      setLogs(getLogs().filter(l=>l.employee!==name));
      renderEmployees(); renderLogs();
    }
    function resetEmployees(){
      if(!confirm('Reset demo employees?')) return;
      setEmployees([
        {name:'Alice', rate:15.00, otMult:1.25},
        {name:'Bob', rate:18.00, otMult:1.50},
        {name:'Charlie', rate:20.00, otMult:1.25}
      ]);
      renderEmployees();
    }

    function addLog(){
      const date = document.getElementById('logDate').value;
      const employee = document.getElementById('logEmp').value;
      const timeIn = document.getElementById('logIn').value;
      const timeOut = document.getElementById('logOut').value;
      if(!date || !employee || !timeIn || !timeOut){ alert('Fill Date, Employee, Time In and Time Out'); return; }
      const logs = getLogs();
      logs.push({date, employee, timeIn, timeOut});
      setLogs(logs); renderLogs();
      document.getElementById('logIn').value='';
      document.getElementById('logOut').value='';
    }
    function delLog(idx){
      const logs = getLogs();
      logs.splice(idx,1); setLogs(logs); renderLogs();
    }
    function clearLogs(){ if(confirm('Clear ALL logs?')) { setLogs([]); renderLogs(); } }

    /***** CSV Export of logs (existing) *****/
    function exportCSV(){
      const logs = getLogs();
      const employees = getEmployees();
      const header = [
        'Date','Employee','Time In','Time Out','Late Minutes','Undertime Minutes','Regular Minutes','OT1 Minutes','Dinner Deduct','OT2 Minutes','PostMidnight Minutes','Regular Pay','OT Pay','Late Deduction','PostMidnight Pay','Net Pay'
      ];
      const rows = logs.map(l=>{
        const emp = employees.find(x=>x.name===l.employee) || {rate:0, otMult:1};
        const c = calculateForLog(l, emp) || {};
        // Use no-comma formatted numbers for safety
        return [l.date,l.employee,l.timeIn,l.timeOut,c.lateMin||0,c.underMin||0,c.regMin||0,c.ot1Min||0,c.dinnerDed||0,c.ot2Min||0,c.postMidMin||0,fmtMoneyNoCommas(c.regPay),fmtMoneyNoCommas(c.otPay),fmtMoneyNoCommas(c.lateDed),fmtMoneyNoCommas(c.postMidPay),fmtMoneyNoCommas(c.net)].join(',');
      });
      const csv = [header.join(','),...rows].join('\n');
      const blob = new Blob([csv],{type:'text/csv'});
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'time_logs.csv';
      a.click();
      URL.revokeObjectURL(a.href);
    }

    /***** Payroll Summary (All employees) *****/
    function computeSummaryAll(){
      const from = document.getElementById('sumFrom').value;
      const to = document.getElementById('sumTo').value;
      if(!from || !to){ alert('Pick a date range'); return; }
      if(from > to){ alert('From date must be <= To date'); return; }

      const employees = getEmployees();
      const logs = getLogs().filter(l => l.date >= from && l.date <= to);
      const tbody = document.getElementById('sumTable');
      tbody.innerHTML = '';

      // For each employee compute sums
      employees.forEach(emp => {
        let totReg=0, totOT=0, totLate=0, totPM=0, totNet=0;
        logs.filter(l => l.employee === emp.name).forEach(l => {
          const c = calculateForLog(l, emp);
          if(!c) return;
          totReg += c.regPay;
          totOT += c.otPay;
          totLate += c.lateDed;
          totPM += c.postMidPay;
          totNet += c.net;
        });
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${emp.name}</td>
          <td class='right'>${fmtMoney(totReg)}</td>
          <td class='right'>${fmtMoney(totOT)}</td>
          <td class='right'>${fmtMoney(totPM)}</td>
          <td class='right'>${fmtMoney(totLate)}</td>
          <td class='right'><strong>${fmtMoney(totNet)}</strong></td>`;
        tbody.appendChild(tr);
      });

      // Save last computed summary in memory for export
      window._lastPayrollSummary = { from, to, rows: Array.from(tbody.querySelectorAll('tr')).map(r=>{
        const cells = r.querySelectorAll('td');
        return {
          name: cells[0].textContent,
          reg: parseFloat(cells[1].textContent.replace(/,/g,'')) || 0,
          ot: parseFloat(cells[2].textContent.replace(/,/g,'')) || 0,
          pm: parseFloat(cells[3].textContent.replace(/,/g,'')) || 0,
          late: parseFloat(cells[4].textContent.replace(/,/g,'')) || 0,
          net: parseFloat(cells[5].textContent.replace(/,/g,'')) || 0,
        };
      })};
    }

    // Clear payroll summary table
    function clearSummary(){ document.getElementById('sumTable').innerHTML=''; window._lastPayrollSummary = null; }

    // Export payroll summary CSV for last computed table (or compute fresh if none)
    function exportPayrollCSV(){
      let summary = window._lastPayrollSummary;
      if(!summary){
        // compute automatically using current date range inputs
        computeSummaryAll();
        summary = window._lastPayrollSummary;
        if(!summary) return;
      }
      const { from, to, rows } = summary;
      const filename = `Payroll_Summary_${from}_to_${to}.csv`;
      const header = ['Employee','Regular Pay','OT Pay','PostMidnight Pay','Late Deduction','Net Pay'];
      const csvRows = rows.map(r => [
        r.name,
        fmtMoneyNoCommas(r.reg),
        fmtMoneyNoCommas(r.ot),
        fmtMoneyNoCommas(r.pm),
        fmtMoneyNoCommas(r.late),
        fmtMoneyNoCommas(r.net)
      ].join(','));
      const csv = [header.join(','), ...csvRows].join('\n');
      const blob = new Blob([csv], {type: 'text/csv'});
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = filename;
      a.click();
      URL.revokeObjectURL(a.href);
    }

    /***** Init *****/
    (function init(){
      if(getEmployees().length===0){
        // demo employees
        setEmployees([
          {name:'Alice', rate:15.00, otMult:1.25},
          {name:'Bob', rate:18.00, otMult:1.50},
          {name:'Charlie', rate:20.00, otMult:1.25}
        ]);
      }
      renderEmployees();
      renderLogs();
    })();
  </script>
</body>
</html>
